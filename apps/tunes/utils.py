import random

from django.conf import settings
from django.core.cache import cache

from tunes.models import Song


def generate_browse_playlist(energy, valence, limit=None, jitter=None, songs=None):
    """
    Return a `QuerySet` of `Song` records whose energy and valence are within the specified range. Used to build a
    playlist of songs for given song attributes.

    :param energy: (float) Energy estimate of `Song` records returned
    :param valence: (float) Valence estimate of `Song` records returned
    :param limit: (int) Optional max numbers of songs to return (can return fewer than the limit!)
    :param jitter: (float) Optional "shuffle" for the boundary box to give users songs from outside their norm
    :param songs: (QuerySet) Optional queryset of songs to filter

    :return playlist: (QuerySet) `QuerySet` of `Song` instances for the given parameters
    """
    energy_lower_limit = energy_upper_limit = energy
    valence_lower_limit = valence_upper_limit = valence

    if songs is None:
        songs = Song.objects.all()

    if jitter:
        energy_lower_limit -= jitter
        energy_upper_limit += jitter

        valence_lower_limit -= jitter
        valence_upper_limit += jitter

    playlist = songs.filter(
        energy__gte=energy_lower_limit,
        energy__lte=energy_upper_limit,
        valence__gte=valence_lower_limit,
        valence__lte=valence_upper_limit
    )

    # Shuffle playlist to ensure freshness
    playlist = list(playlist)
    random.shuffle(playlist)

    if limit:
        playlist = playlist[:limit]

    return playlist


class CachedPlaylistManager(object):
    """Facilitates caching previous user browse playlists"""

    def _make_cache_key(self, user):
        """
        Make a cache key for storing the last previously seen playlist for the user
        :return: (str) Cache key to use in storing/retrieving last seen playlist for user
        """
        return 'browse:{}'.format(user.username)

    def cache_browse_playlist(self, user, playlist):
        """
        Cache the playlist generated by the user for use in retrieving the last seen playlist
        :param playlist: Playlist recently generated by the user
        """
        cache_key = self._make_cache_key(user)
        cache.set(cache_key, playlist, settings.BROWSE_PLAYLIST_CACHE_TIMEOUT)

    def retrieve_cached_browse_playlist(self, user):
        """
        Retrieve the cached playlist for user if one exists, else return None
        :return: Cached browse playlist or None
        """
        cache_key = self._make_cache_key(user)
        return cache.get(cache_key)
